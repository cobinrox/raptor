# to simulate connection to GPIO pins on
SIMULATE_PI=false

# random string identifier to help identify io.properties file
DUMMY=master

# to use pi4j or wiring_pi library
#GPIO_LIBRARY=pi4j
#GPIO_LIBRARY=wiring_pi
#BACKEND_LIBRARY=pi4j
BACKEND_LIBRARY=usb4j

NUM_MOTORS=2

# How to send commands to motors
# spurt = send a movement command, then brake the motors, results in chunky, but safe and slow movement
# continuous = send a movement command and let motor run forever until ebrake command is sent,
# this is similar to how a traditional RC remote transmitter would work
MOTOR_RUN_MODE=spurt
#MOTOR_RUN_MODE=continuous

# motor configuration
#
# chinese_rc = dual motor control, simple remote car style
# M1PLUS_PIN ON GPIO GOES  - TO M1 PWM on chinese card (BLUE WIRE)
# M1MINUS_PIN ON GPIO GOES - TO M1 DIRECTION on chinese card (WHITE WIRE)
# when using chinese card, do not turn on motor power until after Raspi is fully
# powered on because GPIO pins come up high and can cause motor to start up
#
#
# l239d_rc = same, but controlled by L239D logic
#
# l239d_wheel_chair = dual motor control 2 rear motors
#
# chinese_wheel_chair same as above, but controlled by chinese I/O card logic
#
# razor = big honker from the arc
# amazon = lil honker from amazon.com
# fuzzy = old motorcycle
#
#MOVER_CONFIG=razor
MOVER_CONFIG=saber_wc

# motor 1 GPIO pin number
# blue and white
#razor_M1_PLUS_GPIO_PIN=0
#razor_M1_MINUS_GPIO_PIN=2
# yellow and orange
#razor_M2_PLUS_GPIO_PIN=4
#razor_M2_MINUS_GPIO_PIN=5

# blue (6) and white (8)
razor_M1_PLUS_GPIO_PIN=1
razor_M1_MINUS_GPIO_PIN=4
# yellow (9) and orange (11)
razor_M2_PLUS_GPIO_PIN=5
razor_M2_MINUS_GPIO_PIN=6


amazon_M1_PLUS_GPIO_PIN=4
amazon_M1_MINUS_GPIO_PIN=1

chinese_rc_M1_PLUS_GPIO_PIN=1
chinese_rc_M1_MINUS_GPIO_PIN=7
USB_ID_VENDOR=0x268b
USB_ID_PRODUCT=0x0201

# for saber board how much voltage to apply, built-in PWM
#
#  -2000 to + 2000
#  For a 12v battery
#  500 = 2v (-500 = -2v)
# 1000 = 4v (-1000 = -4v)
#
USB_VOLT_STRENGTH=2000

#
# MOTOR 1 COMMANDS
# You can use any alias (e.g. "F", "B", "FFL", "BBR" as a string
# Follow the alias with a colon
# Add +1 or -1 to specify forward (+) or back (-) spin of the motor
# Add multiple spins for a single alias by separating with a pipe (|)
# Separate aliases with a comma
# F => alias for forward
# B => alias for backward
# T => alias for test
# FL => alias for forward left
# FLL => alias for foward full left

razor_M1_CMDS_TO_DTS=M1P:+1,M1M:-1,F:+1,B:-1,L:+1|+1|+1|+1,R:+1,FL:-1|+1,FR:+1|+1,BL:+1|-1,BR:-1|-1,T1:+1
razor_M2_CMDS_TO_DTS=F:+1,B:-1,L:-0|-1|-0|-1,R:-1,FL:+1|+1,FR:-1|+1,BL:-1|-1,BR:+1|-1,T2:+1|-1

chinese_rc_M1_CMDS_TO_DTS=F:+E|+1,B:-E|+1


amazon_M2_PLUS_GPIO_PIN=6
amazon_M2_MINUS_GPIO_PIN=5

chinese_rc_M2_PLUS_GPIO_PIN=6
chinese_rc_M2_MINUS_GPIO_PIN=5
#
# MOTOR 2 COMMANDS
#

chinese_rc_M2_CMDS_TO_DTS=R:-E|+1,L:+E|+1|+1|-E|+1

l239d_rc_M2_CMDS_TO_DTS=LL:+1|+1,L:+1,RR:-1|-1,R:-1,FLL:+1|+1,FL:+1,FRR:-1|-1,FR:-1,BLL:+1|+1,BL:+1,BRR:-1|-1,BR:-1,T:+1|-1



# motor forward or motor backward gpio output
# command, i.e. 1=ON 0=OFF, can be swapped
# according to motor driver
GPIO_ON_STR=1
GPIO_OFF_STR=0

#  M1      M2
#  Left   Right
#  tire   tire
#   ||     ||
#  *||     ||*
#   ||     ||
#
# Forward:   M1 +1 and M2 +1
# Backward:  M2 -1 and M2 -1
# Left:      M1 -1 and M2 +1, +1
# Right:     M1 +1,+1 and M2 -1
#
saber_wc_M2_CMDS_TO_DTS=READV:'M2:getb',S:'M1:0',F:+1,B:-1,L:-1,R:+1,FL:-1|+1,FR:+1|+1,BL:+1|-1,BR:-1|-1,T:+1|-1,RAMP:'R:512',SR:'MD:0'|'MT:512'
saber_wc_M1_CMDS_TO_DTS=READV:'M1:getb',S:'M2:0',F:+1,B:-1,L:+1,R:-1,FL:+1|+1,FR:-1|+1,BL:-1|-1,BR:+1|-1,T:+1|-1,SL:'MD:0'|'MT:-512'

saber_wc_M1_CMD_RUN_TIME_MS=1500
saber_wc_M1_DUTY_CYCLE_HI_MS=1500
saber_wc_M1_DUTY_CYCLE_LO_MS=0
saber_wc_M2_CMD_RUN_TIME_MS=1500
saber_wc_M2_DUTY_CYCLE_HI_MS=1500
saber_wc_M2_DUTY_CYCLE_LO_MS=0


# motor commands should be run for this many msecs
razor_M1_CMD_RUN_TIME_MS=100
razor_M1_DUTY_CYCLE_HI_MS=100
razor_M1_DUTY_CYCLE_LO_MS=0

razor_M2_CMD_RUN_TIME_MS=100
razor_M2_DUTY_CYCLE_HI_MS=100
razor_M2_DUTY_CYCLE_LO_MS=0

amazon_M2_CMD_RUN_TIME_MS=500
amazon_M2_DUTY_CYCLE_HI_MS=1
amazon_M2_DUTY_CYCLE_LO_MS=10

chinese_rc_M2_CMD_RUN_TIME_MS=200
chinese_rc_M2_DUTY_CYCLE_HI_MS=10
chinese_rc_M2_DUTY_CYCLE_LO_MS=10
