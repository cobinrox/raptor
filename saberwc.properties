# to simulate connection to GPIO pins on
SIMULATE_PI=false

# random string identifier to help identify io.properties file
DUMMY=master

# to use pi4j or wiring_pi library
#GPIO_LIBRARY=pi4j
#GPIO_LIBRARY=wiring_pi
#BACKEND_LIBRARY=pi4j
BACKEND_LIBRARY=usb4j

NUM_MOTORS=2

# How to send commands to motors
# spurt = send a movement command, then brake the motors, results in chunky, but safe and slow movement
# continuous = send a movement command and let motor run forever until ebrake command is sent,
# this is similar to how a traditional RC remote transmitter would work
MOTOR_RUN_MODE=spurt
#MOTOR_RUN_MODE=continuous

# motor configuration
#
# chinese_rc = dual motor control, simple remote car style
# M1PLUS_PIN ON GPIO GOES  - TO M1 PWM on chinese card (BLUE WIRE)
# M1MINUS_PIN ON GPIO GOES - TO M1 DIRECTION on chinese card (WHITE WIRE)
# when using chinese card, do not turn on motor power until after Raspi is fully
# powered on because GPIO pins come up high and can cause motor to start up
#
#
# l239d_rc = same, but controlled by L239D logic
#
# l239d_wheel_chair = dual motor control 2 rear motors
#
# chinese_wheel_chair same as above, but controlled by chinese I/O card logic
#
# razor = big honker from the arc
# amazon = lil honker from amazon.com
# fuzzy = old motorcycle
#
#MOVER_CONFIG=razor
MOVER_CONFIG=saber_wc
USB_ID_VENDOR=0x268b
USB_ID_PRODUCT=0x0201

#  -2000 to + 2000
#  For a 12v battery
#  500 = 2v (-500 = -2v)
# 1000 = 4v (-1000 = -4v)
#
USB_VOLT_STRENGTH=2000

saber_wc_M2_CMDS_TO_DTS=READV:'M2:getb',S:'M1:0',F:+1,B:-1,L:-1|-1|-1,R:+1,FL:-1|+1,FR:+1|+1,BL:+1|-1,BR:-1|-1,T:+1|-1,RAMP:'R:512',SR:'MD:0'|'MT:512'
saber_wc_M1_CMDS_TO_DTS=READV:'M1:getb',S:'M2:0',F:+1,B:-1,L:+1|+1|+1,R:-1,FL:+1|+1,FR:-1|+1,BL:-1|-1,BR:+1|-1,T:+1|-1,SL:'MD:0'|'MT:-512'

saber_wc_M1_CMD_RUN_TIME_MS=500
saber_wc_M1_DUTY_CYCLE_HI_MS=500
saber_wc_M1_DUTY_CYCLE_LO_MS=0

saber_wc_M2_CMD_RUN_TIME_MS=250
saber_wc_M2_DUTY_CYCLE_HI_MS=250
saber_wc_M2_DUTY_CYCLE_LO_MS=0


